"""
Django settings for code_setting project.

Generated by 'django-admin startproject' using Django 3.0.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
from datetime import timedelta

import boto3
from decouple import config, Csv
from django.utils.translation import gettext_lazy as _

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)
DEV_ENV = config('DEV_ENV', default=False, cast=bool)

ALLOWED_HOSTS = ['*']

CORS_ORIGIN_ALLOW_ALL = True


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_admin_listfilter_dropdown',
    'rest_framework',
    'drf_yasg',
    'corsheaders',
    'rangefilter',
    'storages',
    'apps.core',
]


LOCAL_APPLICATIONS = [x.split('.')[1] for x in INSTALLED_APPS if x.startswith('apps') and x != 'apps.xmaster']

# Custom User
AUTH_USER_MODEL = 'xmaster.User'


REST_FRAMEWORK = {

    'DEFAULT_PERMISSION_CLASSES': [
         # 'rest_framework.permissions.AllowAny',
        'rest_framework.permissions.IsAuthenticated',
        'utils.permissions.IsAuthorized'
         # 'rest_framework.permissions.IsAdminUser',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PAGINATION_CLASS': 'utils.paginations.Custom20Pagination',
    'PAGE_SIZE': 20
}


# https://django-rest-framework-simplejwt.readthedocs.io/en/latest/settings.html
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=30),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}


SWAGGER_SETTINGS = {
   'SECURITY_DEFINITIONS': {
      'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
      }
   }
}

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
)


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'code_setting.middleware.WhichDatabaseToUseMIddleware',
]

ROOT_URLCONF = 'code_setting.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'code_setting.wsgi.application'


CLIENT_DB = config('DB_LOCAL_DATABASE').split('localdatabase_')[1]
DATABASES = {
    'default': {
        'ENGINE': config('DB_ENGINE'),
        'PORT': config('DB_PORT', cast=int),
        'NAME': config('DB_MASTER_DATABASE'),
        'USER': config('DB_MASTER_USER'),
        'PASSWORD': config('DB_MASTER_PASSWORD'),
        "HOST": config('DB_MASTER_HOST'),
        "ATOMIC_REQUESTS": True
    },
    CLIENT_DB: {
        'ENGINE': config('DB_ENGINE'),
        'PORT': config('DB_PORT', cast=int),
        'NAME': config('DB_LOCAL_DATABASE'),
        'USER': config('DB_LOCAL_USER'),
        'PASSWORD': config('DB_LOCAL_PASSWORD'),
        "HOST": config('DB_LOCAL_HOST'),
        "ATOMIC_REQUESTS": True
        }
}


DATABASE_ROUTERS = [
    'code_setting.routers.TycheToolCompaniesRouter',
    'code_setting.routers.TycheToolMasterRouter',
]


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    # {
    #     'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    # },
]


LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Languages
LANGUAGE_EN = 'en'
LANGUAGE_ES = 'es'
LANGUAGE_PT = 'pt'

LANGUAGES = (
    (LANGUAGE_EN, _('English')),
    (LANGUAGE_ES, _('Spanish')),
    (LANGUAGE_PT, _('Portuguese')),
)

# STATIC FILES
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')


# MEDIA FILES
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# BASE_URL
if DEBUG:
    BASE_URL = 'http://localhost:8000'
else:
    if DEV_ENV:
        BASE_URL = f'https://api.company.com'
    else:
        BASE_URL = f'https://company-{CLIENT_DB}.code_setting.com'


# MAX NUMBER OF PARAMETER THAT MAY BE RECEIVED VIA GET OR POST
DATA_UPLOAD_MAX_NUMBER_FIELDS = 20000

# MAX MEMORY SIZE TO DATA UPLOAD IN DJANGO ADMIN (BY DEFAULT=2621440 -> 2.5 MB)
DATA_UPLOAD_MAX_MEMORY_SIZE = 20971520

ADMIN_CONTACTS_EMAILS = [
    'sergio.cruz@code_setting.com',
]

# Email Config
EMAIL_ACTIVE = config('EMAIL_ACTIVE', default=False, cast=bool)
EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)
EMAIL_BACKEND = config('EMAIL_BACKEND')
EMAIL_HOST = config('EMAIL_HOST')
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
EMAIL_PORT = config('EMAIL_PORT', cast=int)

# App mobile auth for bluetooth
FERNET_KEY = config('FERNET_KEY').encode()

AWS_S3_REGION_NAME = config('AWS_S3_REGION_NAME')
AWS_STORAGE_BUCKET_NAME = config('AWS_STORAGE_BUCKET_NAME')
AWS_S3_CUSTOM_DOMAIN = config('AWS_S3_CUSTOM_DOMAIN')
DEFAULT_FILE_STORAGE = config('DEFAULT_FILE_STORAGE')
AWS_DEFAULT_ACL = None

# AWS S3 & Step Function
if DEBUG:
    AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY')

    AWS_STEP_FUNCTION_CLIENT = boto3.client(
        'stepfunctions',
        region_name=AWS_S3_REGION_NAME,
        aws_access_key_id=AWS_ACCESS_KEY_ID,
        aws_secret_access_key=AWS_SECRET_ACCESS_KEY
    )
else:
    AWS_STEP_FUNCTION_CLIENT = boto3.client(
        'stepfunctions',
        region_name=AWS_S3_REGION_NAME
    )

STATE_MACHINE_BY_DATAFRAME_ARN = config('STATE_MACHINE_BY_DATAFRAME_ARN')
